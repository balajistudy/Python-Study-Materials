Python Class & inheritance

	--> Class is an arrangement of variables and  functions into a single entity.
	--> It works as template for creating objects.

How To Create A Class In Python?
	--> There are some terms which you need to know while working with classes in Python.

			1. The “class” keyword
			2. The instance attributes
			3. The class attributes
			4. The “self” keyword
			5. The “__init_” method

The “class” keyword:

	class BookStore:
		pass
		
What Is Self?
	--> Python provides the “self” keyword to represent the instance of a class. 
	--> It works as a handle for accessing the class members such as attributes from the class methods.
	--> Also, please note that it is implicitly the first argument to the __init__ method in every Python class. 

What Is __init__ (Constructor) In Python?
	--> The “__init__()” is a unique method associated with every Python class.
	--> Python calls it automatically for every object created from the class. 
	--> Its purpose is to initialize the class attributes with user-supplied values.
	--> It is commonly known as Constructor in object-oriented programming.
	
	Program:
	===================================================================
	class BookStore:
		def __init__(self):
			print("__init__() constructor gets called...")
        
	B1 = BookStore()
	
	output:
	__init__() constructor gets called...
	===================================================================
	
The Instance Attributes:

	--> These are object-specific attributes defined as parameters to the __init__ method. 
	--> Each object can have different values for themselves.

	--> In the below example, the “attrib1” and “attrib2” are the instance attributes.
	===================================================================
	class BookStore:
		def __init__(self, attrib1, attrib2):
			self.attrib1 = attrib1
			self.attrib2 = attrib2
	===================================================================

The Class Attributes:

	--> Unlike the instance attributes which are visible at object-level, the class attributes remain the same 
	for all objects.

	--> Check out the below example to demonstrate the usage of class-level attributes.
	===================================================================
	class BookStore:
		instances = 0
		def __init__(self, attrib1, attrib2):
			self.attrib1 = attrib1
			self.attrib2 = attrib2
			BookStore.instances += 1

	b1 = BookStore("", "")
	b2 = BookStore("", "")

	print("BookStore.instances:", BookStore.instances)
	===================================================================
	--> In this example, the “instances” is a class-level attribute. You can access it using the class name. It holds the total no. of instances created.

	--> We’ve created two instances of the class <Bookstore>. Hence, executing the example should print “2” as the 
	output.

	# output
	BookStore.instances: 2
	
Python Class demo:
==========================================================
class BookStore:
    noOfBooks = 0
 
    def __init__(self, title, author):
        self.title = title
        self.author = author
        BookStore.noOfBooks += 1
 
    def bookInfo(self):
        print("Book title:", self.title)
        print("Book author:", self.author,"\n")
 
# Create a virtual book store
b1 = BookStore("Great Expectations", "Charles Dickens")
b2 = BookStore("War and Peace", "Leo Tolstoy")
b3 = BookStore("Middlemarch", "George Eliot")
 
# call member functions for each object
b1.bookInfo()
b2.bookInfo()
b3.bookInfo()

print("BookStore.noOfBooks:", BookStore.noOfBooks)
================================================================

output:

# output
Book title: Great Expectations
Book author: Charles Dickens 

Book title: War and Peace
Book author: Leo Tolstoy 

Book title: Middlemarch
Book author: George Eliot 

BookStore.noOfBooks: 3


******************************************************************************************************************
******************************************************************************************************************

									===============
									= Inheritance =
									===============

Inheritance:
	--> Inheritance is the core feature of object-oriented programming which extends the functionality of an 
		existing class by adding new features.
What Is The Purpose Of Inheritance?
	--> By using the inheritance feature, we can have a new blueprint with old attributes but without making any 
	changes to the original one.
	--> We refer to the new class as the derived or child class whereas the old one becomes the base or parent class.
	
How To Implement Inheritance In Python?
		====================================
		class ParentClass:
		  Parent class attributes
		  Parent class methods
		class ChildClass(ParentClass):
		  Child class attributes
		  Child class methods
		====================================

let’s consider the following example.

Create A Base Class Taxi And A Subclass Vehicle
We have a base class Taxi, and it has a subclass (child) Vehicle.
=========================================================================
class Taxi:

    def __init__(self, model, capacity, variant):
        self.__model = model      # __model is private to Taxi class
        self.__capacity = capacity
        self.__variant = variant

    def getModel(self):          # getmodel() is accessible outside the class
        return self.__model

    def getCapacity(self):         # getCapacity() function is accessible to class Vehicle
        return self.__capacity

    def setCapacity(self, capacity):  # setCapacity() is accessible outside the class
        self.__capacity = capacity

    def getVariant(self):         # getVariant() function is accessible to class Vehicle
        return self.__variant

    def setVariant(self, variant):  # setVariant() is accessible outside the class
        self.__variant = variant

class Vehicle(Taxi):

    def __init__(self, model, capacity, variant, color):
        # call parent constructor to set model and color  
        super().__init__(model, capacity, variant)
        self.__color = color

    def vehicleInfo(self):
        return self.getModel() + " " + self.getVariant() + " in " + self.__color + " with " + self.getCapacity() + " seats"

# In method getInfo we can call getmodel(), getCapacity() as they are 
# accessible in the child class through inheritance

v1 = Vehicle("i20 Active", "4", "SX", "Bronze")
print(v1.vehicleInfo())
print(v1.getModel()) # Vehicle has no method getModel() but it is accessible via Vehicle class

v2 = Vehicle("Fortuner", "7", "MT2755", "White")
print(v2.vehicleInfo())
print(v2.getModel()) # Vehicle has no method getModel() but it is accessible via Vehicle class

Please note that we have not specified the getName() method in the Vehicle class, but we can access it. 
It is because the Vehicle class inherits it from the Taxi class.

The output of the above example is as follows.

# output
i20 Active SX in Bronze with 4 seats
i20 Active
Fortuner MT2755 in White with 7 seats
Fortuner
=========================================================================

The Super() Method
What Does The Super() Do In Python?
	The super() method allows us to access the inherited methods that cascade to a class object.

	In the earlier example, we’ve used the super() method in the constructor of the child class <Vehicle>. 
	It is invoking the function of the base class <Taxi>.

How Does The Super() Method Work?
	If you have to invoke a method in the base class, i.e., vehicleInfo() defined in the child class, 
	then you can use the following code