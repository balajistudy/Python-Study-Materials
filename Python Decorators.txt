Python Decorators
	--> To add functionality to an existing code
	--> Also called metaprogramming as a part of the program tries to modify another part of the program at 
		compile time.
		
Basic decorators:
=====================================================
def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner

def ordinary():
    print("I am ordinary")
output:	
>>> ordinary()
I am ordinary

>>> # let's decorate this ordinary function
>>> pretty = make_pretty(ordinary)
>>> pretty()
I got decorated
I am ordinary

We can use the @ symbol along with the name of the decorator function and place it above the definition of the 
function to be decorated. For example,

@make_pretty
def ordinary():
    print("I am ordinary")
is equivalent to

def ordinary():
    print("I am ordinary")
ordinary = make_pretty(ordinary)
===================================================
Decorators with parameters

def smart_divide(func):
   def inner(a,b):
      print("I am going to divide",a,"and",b)
      if b == 0:
         print("Whoops! cannot divide")
         return

      return func(a,b)
   return inner

@smart_divide
def divide(a,b):
    return a/b

output:
>>> divide(2,5)
I am going to divide 2 and 5
0.4

>>> divide(2,0)
I am going to divide 2 and 0
Whoops! cannot divide


In Python, this magic is done as function(*args, **kwargs). In this way, args will be the tuple of positional arguments and kwargs will be the dictionary of keyword arguments. An example of such decorator will be.

def works_for_all(func):
    def inner(*args, **kwargs):
        print("I can decorate any function")
        return func(*args, **kwargs)
    return inner
================================================================================================

Chaining Decorators:

def star(func):
    def inner(*args, **kwargs):
        print("*" * 30)
        func(*args, **kwargs)
        print("*" * 30)
    return inner

def percent(func):
    def inner(*args, **kwargs):
        print("%" * 30)
        func(*args, **kwargs)
        print("%" * 30)
    return inner

@star
@percent
def printer(msg):
    print(msg)
printer("Hello")

output:
******************************
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Hello
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
******************************


@star
@percent
def printer(msg):
    print(msg)
printer("Hello")

 this is equal to the below one
def printer(msg):
    print(msg)
printer = star(percent(printer))